export default [
  {
    "content": "# Hello!\n\nnext-forge has a pre-configured `ai` package that uses [ai-sdk](https://sdk.vercel.ai/) to provide a simple interface for interacting with AI models.\n\n## Usage\n\nTo use the `ai` package, you can import it from the `@repo/ai` package. For example:\n\n```ts generate.ts\nimport { generateText } from '@repo/ai';\nimport { provider } from '@repo/ai/provider';\n\nconst response = await generateText({\n  model: provider('gpt-4o'),\n  prompt: 'Hello, world!',\n});\n```\n\n## Adding payment agentic capabilities\n\nYou can use the `paymentsAgentToolkit` to add payments capabilities to your AI agent for financial services. As next-forge uses Stripe by default, here's an example of how to use it:\n\n```ts generate.ts\nimport { generateText } from '@repo/ai';\nimport { paymentsAgentToolkit } from '@repo/payments/ai';\nimport { provider } from '@repo/ai/provider';\n\nconst response = await generateText({\n  model: provider('gpt-4o'),\n  tools: {\n    ...paymentsAgentToolkit.getTools(),\n  },\n  maxSteps: 5,\n  prompt: 'Create a payment link for a new product called \\\"Test\\\" with a price of $100.',\n})\n```\n\n## Adding analytics\n\nThere are quite a few ways to add analytics to your AI agent depending on your use case, environment and whether you're generating or streaming.\n\nHere's a simple example of how to add analytics to a `generateText` request using our `analytics` package:\n\n```ts generate.ts\nimport { generateText } from '@repo/ai';\nimport { analytics } from '@repo/analytics/posthog/server';\nimport { currentUser } from '@repo/auth/server';\nimport { provider } from '@repo/ai/provider';\n\nconst model = provider('gpt-4o');\nconst prompt = 'Hello, world!';\nconst tokenInputCost = 0.0000025;\nconst tokenOutputCost = 0.00001;\nconst startTime = performance.now();\nconst user = await currentUser();\n\nif (!user) {\n  throw new Error('User not found');\n}\n\nconst response = await generateText({\n  model,\n  prompt,\n});\n\nconst endTime = performance.now();\n\nanalytics.capture({\n  event: 'chat_completion',\n  distinctId: user.id,\n  properties: {\n    model: model.modelId,\n    prompt,\n    prompt_tokens: response.usage.promptTokens,\n    completion_tokens: response.usage.completionTokens,\n    total_tokens: response.usage.totalTokens,\n    input_cost_in_dollars: response.usage.promptTokens * tokenInputCost,\n    output_cost_in_dollars: response.usage.promptTokens * tokenOutputCost,\n    total_cost_in_dollars:\n      response.usage.promptTokens * tokenInputCost +\n      response.usage.completionTokens * tokenOutputCost,\n    response_time_in_ms: endTime - startTime,\n  },\n});\n```\n\n## Using a different provider\n\nIf you want to use a different provider, you can modify the `provider` in `@repo/ai/provider.ts` to use the one you want. For example, to use Anthropic, you can change it to:\n\n```ts packages/ai/provider.ts\nimport { createAnthropic } from '@ai-sdk/anthropic';\n\nexport const provider = createAnthropic({\n  apiKey: env.ANTHROPIC_API_KEY,\n});\n```",
    "id": 1,
    "title": "AI",
    "summary": "How to use AI in next-forge.",
    "_meta": {
      "filePath": "hello-world.md",
      "fileName": "hello-world.md",
      "directory": ".",
      "extension": "md",
      "path": "hello-world"
    }
  }
];